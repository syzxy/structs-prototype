import React, { useState, useEffect } from "react";
import SLLNode from "../../components/SLLNode/SLLNode";
import Arrow from "../../components/Arrow/Arrow";
import Grid from "../../components/Grid/Grid";
import styles from "./SLList.module.css";
import Button from "../../components/Button/Button";
import { AnimatePresence } from "framer-motion";
import { SLList as listADT } from "../../data_structures/lists/SLList";

export default function SLList() {
  // const [list, setList] = useState(sLList);
  const [list, setList] = useState(); // The actual list data structure
  const [array, setArray] = useState(); // The array representation used for rendering
  const [valueAppended, setValueAppended] = useState("");
  const [valueDeleted, setValueDeleted] = useState("");
  const [actions, setActions] = useState();
  const [renderInstructions, setRenderInstructions] = useState(false);

  useEffect(() => {
    const listEntity = new listADT();
    listEntity.addLast(1);
    listEntity.addLast(2);
    listEntity.addLast(3);
    listEntity.addLast(4);
    listEntity.addLast(5);
    setList(listEntity);
  }, []);

  useEffect(() => {
    if (list) {
      const newArray = [];
      list.toArray().forEach((e, i) => {
        newArray.push({ id: 2 * i, value: e });
        newArray.push({ id: 2 * i + 1, value: Infinity });
      });
      newArray.pop();
      setArray(newArray);
    }
  }, [list]);

  const appendNode = () => {
    if (!valueAppended || isNaN(valueAppended)) {
      alert("Not a valid number!");
    } else {
      // calling actual addLast method of the list data structure
      list.addLast(parseInt(valueAppended));
      setList(Object.create(list, Object.getOwnPropertyDescriptors(list)));
    }
  };

  const deleteNodeByIndex = (index) => {
    alert("Not working yet");
    // console.log("deleting ", list[index]);
    // let newList = list.filter((_, i) => i !== index && i !== index + 1);
    // if (index === list.length - 1) {
    //   newList.pop();
    // }
    // setList(newList);
  };

  const deleteNodeByValue = (target) => {
    // calling actual remove method of the list data structure
    const deletionActions = list.remove(target);
    setRenderInstructions(true);
    setActions(deletionActions);
  };

  return (
    <div className={styles.canvas}>
      <Grid>
        <AnimatePresence>
          {array &&
            array.map((e, i) =>
              e.value < Infinity ? (
                <SLLNode key={e.id} onDeletNode={() => deleteNodeByIndex(i)}>
                  {e.value}
                </SLLNode>
              ) : (
                <Arrow key={e.id} />
              )
            )}
        </AnimatePresence>
      </Grid>
      <div>
        <input
          type="text"
          placeholder="value of the new node?"
          value={valueAppended}
          onChange={(e) => setValueAppended(e.target.value)}
        />
        <Button onClick={appendNode}>Append Node</Button>
      </div>
      <div>
        <input
          type="text"
          placeholder="value of the node you want to remove?"
          value={valueDeleted}
          onChange={(e) => setValueDeleted(e.target.value)}
        />
        <Button onClick={() => deleteNodeByValue(parseInt(valueDeleted))}>
          Delete Node
        </Button>
      </div>
      <div>
        {actions && (
          <ul style={{color: renderInstructions ? "black": "rgba(0,0,0,0.2)"}}>
            {actions.map((action, i) => (
              <li key={i}>
                <h2>{JSON.stringify(action)}</h2>
              </li>
            ))}
          </ul>
        )}
        {renderInstructions && (
          <>
            <br />
            <br />
            <h3>
              The numbers following{" "}
              <code style={{ border: "1px solid", borderRadius: "6px" }}>
                "index"/"from"/"to"
              </code>{" "}
              are indices of the linked list elements<br /><br />
              And The sequence is generated by actual <code style={{ border: "1px solid", borderRadius: "6px" }}>remove</code> algorithm (a running pointer) of the list Data Structure
              <br /><br />See line63 in <code style={{ border: "1px solid", borderRadius: "6px" }}>"src/pages/SLList/SLList.jsx"</code> 
            </h3>
            <h3>
              The animation will be off because I set the{" "}
              <code style={{ border: "1px solid", borderRadius: "6px" }}>
                "key"
              </code>{" "}
              prop incorrectly, but that's not important
            </h3>
            <button
              onClick={() => {
                setList(
                  Object.create(list, Object.getOwnPropertyDescriptors(list))
                );
                setRenderInstructions(false);
              }}
            >
              OK got it, delete the element from the list now
            </button>
          </>
        )}
      </div>
    </div>
  );
}
